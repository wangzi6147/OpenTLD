#include <opencv2/opencv.hpp>
#include <tld_utils.h>
#include <iostream>
#include <sstream>
#include <TLD.h>
#include <stdio.h>
#include <videoInput.h>
#include "nss_toolkit.h"
#include "nsst_define.h"
#include "ffmpegDecode.h"

#pragma comment(linker, "/NODEFAULTLIB:atlthunk.lib")


using namespace cv;
using namespace std;
//Global variables
Rect box;
bool drawing_box = false;
bool gotBB = false;
bool tl = true;
bool rep = false;
bool fromfile=false;
string video;
bool ifLogin = false;


void readBB(char* file){
  ifstream bb_file (file);
  string line;
  getline(bb_file,line);
  istringstream linestream(line);
  string x1,y1,x2,y2;
  getline (linestream,x1, ',');
  getline (linestream,y1, ',');
  getline (linestream,x2, ',');
  getline (linestream,y2, ',');
  int x = atoi(x1.c_str());// = (int)file["bb_x"];
  int y = atoi(y1.c_str());// = (int)file["bb_y"];
  int w = atoi(x2.c_str())-x;// = (int)file["bb_w"];
  int h = atoi(y2.c_str())-y;// = (int)file["bb_h"];
  box = Rect(x,y,w,h);
}
//bounding box mouse callback
void mouseHandler(int event, int x, int y, int flags, void *param){
  switch( event ){
  case CV_EVENT_MOUSEMOVE:
    if (drawing_box){
        box.width = x-box.x;
        box.height = y-box.y;
    }
    break;
  case CV_EVENT_LBUTTONDOWN:
    drawing_box = true;
    box = Rect( x, y, 0, 0 );
    break;
  case CV_EVENT_LBUTTONUP:
    drawing_box = false;
    if( box.width < 0 ){
        box.x += box.width;
        box.width *= -1;
    }
    if( box.height < 0 ){
        box.y += box.height;
        box.height *= -1;
    }
    gotBB = true;
    break;
  }
}

void print_help(char** argv){
  printf("use:\n     %s -p /path/parameters.yml\n",argv[0]);
  printf("-s    source video\n-b        bounding box file\n-tl  track and learn\n-r     repeat\n");
}

void read_options(int argc, char** argv,VideoCapture& capture,FileStorage &fs){
  for (int i=0;i<argc;i++){
      if (strcmp(argv[i],"-b")==0){
          if (argc>i){
              readBB(argv[i+1]);
              gotBB = true;
          }
          else
            print_help(argv);
      }
      if (strcmp(argv[i],"-s")==0){
          if (argc>i){
              video = string(argv[i+1]);
              capture.open(video);
              fromfile = true;
          }
          else
            print_help(argv);

      }
      if (strcmp(argv[i],"-p")==0){
          if (argc>i){
              if(!fs.open(argv[i+1], FileStorage::READ))
				  printf("Couldn't open parameters file\n");
          }
          else
            print_help(argv);
      }
      if (strcmp(argv[i],"-no_tl")==0){
          tl = false;
      }
      if (strcmp(argv[i],"-r")==0){
		  if(fromfile)
			rep = true;
		  else
			printf("Cannot repeat live captures. Ignoring \"-r\" option.\n");
      }
  }
}

void CALLBACK message_callback(int event_type, NsstEventCommonParam* event_param)

{

	switch (event_type)

	{

	case NSSTEV_LOGIN:

	{

						 if (NSST_SUCCESS == event_param->result)

						 {
							 ifLogin = true;
							 printf("login");

						 }

						 else

						 {

							 printf("login failed");

						 }

						 break;

	}

	case NSSTEV_MEDIA_CONNECTED:

	{

								   printf("NSSTEV_MEDIA_CONNECTED");

								   break;

	}

	case NSSTEV_MEDIA_RECONNECTING:

	{

									  printf("NSSTEV_MEDIA_RECONNECTING");

									  break;

	}

	case NSSTEV_MEDIA_ERROR:

	{

							   printf("NSSTEV_MEDIA_ERROR");

							   break;

	}

	}
}

int CALLBACK MediaStreamCallBack(NsstChannel* nsst_channel,
	int data_type,
	char* buffer,
	int buffer_size,
	int user_data)
{
	//printf("%d", buffer_size);

	FILE *testFile = fopen("D:\\1.h264", "ab+");
	NPL_STREAM_VIDEO *test = (NPL_STREAM_VIDEO*)buffer;
	fwrite(test->data, test->length, 1, testFile);
	fclose(testFile);
	return 0;
}

int main(int argc, char * argv[]){
	//NSS
	NSSTStartup();
	NSSTSetUserCallback(message_callback, NULL);
	NsstDevice NSSTdevice;
	DEVICE_ID device_id_;
	strcpy(NSSTdevice.host, "192.168.0.99");
	strcpy(NSSTdevice.username, "admin");
	strcpy(NSSTdevice.password, "admin");	
	NSSTdevice.protocol_port = 80;
	NSSTdevice.rtsp_port = 554;
	NSSTdevice.dev_type = (NSST_DEVICE_TYPE)0;
	device_id_ = NSSTCreateDevice(&NSSTdevice, NULL);
	NSSTLogin(device_id_);
	NsstChannel   nsst_channel_;
	nsst_channel_.dev_id = device_id_;
	nsst_channel_.channel = 0;
	nsst_channel_.stream = 0; 
	NsstPTZParam param;
	param.action = NS_PTZ_MOVE_LEFT;
	param.speed = 50;
  //create a videoInput object
  videoInput VI;
  
  //Prints out a list of available devices and returns num of devices found
  int numDevices = VI.listDevices();	

  int device = 0;  //this could be any deviceID that shows up in listDevices

  VideoCapture capture;
  FileStorage fs;
  //Read options
  read_options(argc,argv,capture,fs);
  int width, height;
  unsigned char * framePixels;    
  //Init camera
  if(!fromfile) {
	if(!VI.setupDevice(device, 320, 240)) {
	  cout << "capture device failed to open!" << endl;
	  return 1;
    }
    //As requested width and height can not always be accomodated
    //make sure to check the size once the device is setup

    width = VI.getWidth(device);
    height = VI.getHeight(device);
    int size = VI.getSize(device);	

	framePixels = new unsigned char[size];        
  }
  else if(!capture.isOpened()) {
	cout << "capture device failed to open!" << endl;
	return 1;
  }
  //Register mouse callback to draw the bounding box
  namedWindow("FG Mask MOG 2");
  cvNamedWindow("TLD",CV_WINDOW_AUTOSIZE);
  cvSetMouseCallback( "TLD", mouseHandler, NULL );
  //MOG2
  BackgroundSubtractor *pMOG2 = new BackgroundSubtractorMOG2();
  Mat fgMaskMOG2;
  vector<vector<Point> > contours;
  vector<Vec4i> hierarchy;
  Rect r;
  int centerP = 3;
  //HOG
  Mat ROI;
  cv::HOGDescriptor hog; // 采用默认参数
  hog.setSVMDetector(cv::HOGDescriptor::getDefaultPeopleDetector());  // 采用已经训练好的行人检测分类器
  std::vector<cv::Rect> regions;
  //TLD framework
  TLD tld;
  //Read parameters file
  tld.read(fs.getFirstTopLevelNode());
  Mat frame;
  Mat last_gray;
  Mat first;
  Size size;
  if (fromfile){
      capture >> frame;
      cvtColor(frame, last_gray, CV_RGB2GRAY);
      frame.copyTo(first);
  }
  else {
	  while(!VI.isFrameNew(device));
	  VI.getPixels(device, framePixels, false, true);
	  first = cv::Mat(height, width, CV_8UC3, framePixels);
  }

  ///Initialization
  size = Size(first.cols*(float)fs.getFirstTopLevelNode()["resize_width"], first.rows*(float)fs.getFirstTopLevelNode()["resize_height"]);
  while (fromfile&&capture.read(first)){
	  resize(first, first, size);
	  imshow("TLD", first);
	  NSSTPTZControl(&nsst_channel_, &param);//TEST
	  if (cvWaitKey(33) == ' '){
	  break;
	  }
  }

  //media stream
  DrawParams params;
  params.draw_wnd = 0;
  params.width = 0;
  params.height = 0;
  NSSTStartTransport(&nsst_channel_, NSST_TCP, &params, 4);
  NSSTStartPlay(&nsst_channel_);
  NSSTSetMediaStreamCallback(&nsst_channel_, MediaStreamCallBack, 0);

  while (fromfile&&capture.read(first)){
	  resize(first, first, size);
	  pMOG2->operator()(first, fgMaskMOG2, -0.1);
	  erode(fgMaskMOG2, fgMaskMOG2, getStructuringElement(0, Size(2 * centerP + 1, 2 * centerP + 1), Point(centerP, centerP)));
	  dilate(fgMaskMOG2, fgMaskMOG2, getStructuringElement(0, Size(2 * centerP + 1, 2 * centerP + 1), Point(centerP, centerP)));
	  dilate(fgMaskMOG2, fgMaskMOG2, getStructuringElement(0, Size(2 * centerP + 1, 2 * centerP + 1), Point(centerP, centerP)));
	  contours.clear();
	  hierarchy.clear();
	  findContours(fgMaskMOG2, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0));
	  for (int i = 0; i < contours.size(); i++){
		  if (contourArea(contours[i]) < first.rows*first.cols / 40){
			continue;
		  }
		r = boundingRect(contours[i]);
		ROI = first(r);
		regions.clear();
		hog.detectMultiScale(ROI, regions, 0, cv::Size(8, 8), cv::Size(32, 32), 1.05, 1);
		for (int j = 0; j < regions.size(); j++){
			rectangle(first, cv::Point(r.x+regions[j].x, r.y+regions[j].y), cv::Point(r.x + regions[j].x + regions[j].width, r.y + regions[j].y + regions[j].height), cv::Scalar(255, 0, 0), 1);
		}
		rectangle(fgMaskMOG2, cv::Point(r.x, r.y), cv::Point(r.x + r.width, r.y + r.height), cv::Scalar(255, 255, 255), 1);
	  }
	  if (regions.size()>0){
		  box = Rect(cv::Point(r.x + regions[0].x, r.y + regions[0].y), cv::Point(r.x + regions[0].x + regions[0].width, r.y + regions[0].y + regions[0].height));
		  box = Rect(cv::Point(box.x + box.width /4, box.y + box.height /4), cv::Point(box.x + box.width *3/4, box.y + box.height*3/4));
		  if (min(box.width, box.height) >= (int)fs.getFirstTopLevelNode()["min_win"]){
			  first.copyTo(frame);
			  cvtColor(frame, last_gray, CV_RGB2GRAY);
			  drawBox(frame, box);
			  imshow("TLD", frame);
			  gotBB = true;
			  break;
		  }
	  }
	  imshow("TLD", first);
	  imshow("FG Mask MOG 2", fgMaskMOG2);
	  if (cvWaitKey(33) == ' '){
		  break;
	  }
  }
GETBOUNDINGBOX:
  while(!gotBB)
  {
	  first.copyTo(frame);
    cvtColor(frame, last_gray, CV_RGB2GRAY);
    drawBox(frame,box);
    imshow("TLD", frame);
    if (cvWaitKey(33) == 'q')
	    return 0;
  }
  if (min(box.width,box.height)<(int)fs.getFirstTopLevelNode()["min_win"]){
      cout << "Bounding box too small, try again." << endl;
      gotBB = false;
      goto GETBOUNDINGBOX;
  }
  //Remove callback
  cvSetMouseCallback( "TLD", NULL, NULL );
  printf("Initial Bounding Box = x:%d y:%d h:%d w:%d\n",box.x,box.y,box.width,box.height);
  //Output file
  FILE  *bb_file = fopen("bounding_boxes.txt","w");
  //TLD initialization
  tld.init(last_gray,box,bb_file);

  ///Run-time
  Mat current_gray;
  BoundingBox pbox;
  vector<Point2f> pts1;
  vector<Point2f> pts2;
  bool status=true;
  int frames = 1;
  int detections = 1;
REPEAT:
  while((fromfile && capture.read(frame)) || !fromfile){
	if(!fromfile) {
		while(!VI.isFrameNew(device));
		VI.getPixels(device, framePixels, false, true);
		frame = cv::Mat(height, width, CV_8UC3, framePixels);
	}
		
    //get frame
	resize(frame, frame, size);
    cvtColor(frame, current_gray, CV_RGB2GRAY);
    //Process Frame
    tld.processFrame(last_gray,current_gray,pts1,pts2,pbox,status,tl,bb_file);
    //Draw Points
    if (status){
      drawPoints(frame,pts1);
      drawPoints(frame,pts2,Scalar(0,255,0));
      drawBox(frame,pbox);
      detections++;
    }
    //Display
    imshow("TLD", frame);
    //swap points and images
    swap(last_gray,current_gray);
    pts1.clear();
    pts2.clear();
    frames++;
	printf("Detection rate: %d/%d\n", detections, frames);
	int key = cvWaitKey(33);
	if (key == 'q')
		return 0;
	else if (key == ' '){
		while (cvWaitKey(-1) != ' ')
			continue;
	}
  }
  if (rep){
    rep = false;
    tl = false;
    fclose(bb_file);
    bb_file = fopen("final_detector.txt","w");
    //capture.set(CV_CAP_PROP_POS_AVI_RATIO,0);
    capture.release();
    capture.open(video);
    goto REPEAT;
  }
  fclose(bb_file);
  return 0;
}
